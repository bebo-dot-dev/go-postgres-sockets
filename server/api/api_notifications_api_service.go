/*
 * Notifications API
 *
 * A notifications proof of concept API
 *
 * API version: 0.1.0
 * Contact: joe@bebo.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"net/http"
	"os"
)

const (
	dbhost = "localhost"
	dbport = 5432
	dbuser = "postgres"
	dbname = "notifications"
)

// NotificationsApiService is a service that implements the logic for the NotificationsApiServicer
// This service should implement the business logic for every endpoint for the NotificationsAPIApi API.
// Include any external packages or services that will be required by this service.
type NotificationsApiService struct {
}

// NewNotificationsApiService creates a default api service
func NewNotificationsApiService() NotificationsApiServicer {
	return &NotificationsApiService{}
}

func (s *NotificationsApiService) getDbConnection() *sql.DB {
	connStr := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		dbhost, dbport, dbuser, os.Getenv("POSTGRES_PASSWORD"), dbname)

	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}

	err = db.Ping()
	if err != nil {
		panic(err)
	}

	return db
}

// AddNotification - adds a new notification
func (s *NotificationsApiService) AddNotification(ctx context.Context, request NotificationDetails) (ImplResponse, error) {
	err := request.Validate()
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	db := s.getDbConnection()
	defer db.Close()

	var notificationId sql.NullInt32
	err = db.QueryRow("SELECT id FROM public.new_notification($1, $2);", request.NotificationType, request.NotificationText).Scan(&notificationId)

	return Response(http.StatusCreated, Id{Id: notificationId.Int32}), nil
}

// Ping - tests this api
func (s *NotificationsApiService) Ping(ctx context.Context) (ImplResponse, error) {
	hostname, err := os.Hostname()
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	return Response(http.StatusCreated, PingResponse{Hostname: hostname}), nil
}
