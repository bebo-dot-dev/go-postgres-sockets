/*
 * User API
 *
 * A notifications proof of concept API
 *
 * API version: 0.1.0
 * Contact: joe@bebo.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A NotificationsAPIApiController binds http requests to an api service and writes the service results to the http response
type NotificationsAPIApiController struct {
	service NotificationsAPIApiServicer
}

// NewNotificationsAPIApiController creates a default api controller
func NewNotificationsAPIApiController(s NotificationsAPIApiServicer) Router {
	return &NotificationsAPIApiController{service: s}
}

// Routes returns all of the api route for the NotificationsAPIApiController
func (c *NotificationsAPIApiController) Routes() Routes {
	return Routes{
		{
			"AddNotification",
			strings.ToUpper("Put"),
			"/addNotification",
			c.AddNotification,
		},
		{
			"Ping",
			strings.ToUpper("Get"),
			"/ping",
			c.Ping,
		},
	}
}

// AddNotification - adds a new notification
func (c *NotificationsAPIApiController) AddNotification(w http.ResponseWriter, r *http.Request) {
	notificationDetails := &NotificationDetails{}
	if err := json.NewDecoder(r.Body).Decode(&notificationDetails); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddNotification(r.Context(), *notificationDetails)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Ping - tests this api
func (c *NotificationsAPIApiController) Ping(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Ping(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
